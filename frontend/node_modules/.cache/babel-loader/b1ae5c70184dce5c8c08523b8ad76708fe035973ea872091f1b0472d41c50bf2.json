{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport BetZillaArtifact from '../abi/BetZilla.json';\nconst BetZillaABI = BetZillaArtifact.abi;\n\n// Contract address from latest deployment\nconst CONTRACT_ADDRESS = '0x5FbDB2315678afecb367f032d93F642f64180aa3';\nexport const useBetzilla = () => {\n  _s();\n  const [contract, setContract] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Check if wallet is already connected\n  const checkWalletConnection = async () => {\n    try {\n      if (!window.ethereum) {\n        return false;\n      }\n      const accounts = await window.ethereum.request({\n        method: 'eth_accounts'\n      });\n      if (accounts.length > 0) {\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        setAccount(accounts[0]);\n        setSigner(signer);\n\n        // Create contract instance\n        const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, BetZillaABI, signer);\n        setContract(contractInstance);\n        return true;\n      }\n      return false;\n    } catch (err) {\n      console.error('Error checking wallet connection:', err);\n      return false;\n    }\n  };\n\n  // Connect to MetaMask\n  const connectWallet = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      if (!window.ethereum) {\n        throw new Error('MetaMask not installed');\n      }\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      setAccount(accounts[0]);\n      setSigner(signer);\n\n      // Create contract instance\n      const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, BetZillaABI, signer);\n      setContract(contractInstance);\n      return accounts[0];\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initialize wallet connection on app start\n  useEffect(() => {\n    const initializeWallet = async () => {\n      if (!isInitialized) {\n        await checkWalletConnection();\n        setIsInitialized(true);\n      }\n    };\n    initializeWallet();\n  }, [isInitialized]);\n\n  // Listen for account changes\n  useEffect(() => {\n    if (window.ethereum) {\n      const handleAccountsChanged = accounts => {\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n          // Recreate contract instance with new signer\n          const provider = new ethers.BrowserProvider(window.ethereum);\n          provider.getSigner().then(signer => {\n            setSigner(signer);\n            const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, BetZillaABI, signer);\n            setContract(contractInstance);\n          });\n        } else {\n          setAccount(null);\n          setContract(null);\n          setSigner(null);\n        }\n      };\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      };\n    }\n  }, []);\n\n  // Place a bet\n  const placeBet = async (marketId, outcome, amount) => {\n    if (!contract || !signer) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      console.log(`🎯 Placing bet: Market ${marketId}, Outcome ${outcome}, Amount ${amount} ETH`);\n      const tx = await contract.placeBet(marketId, outcome, {\n        value: ethers.parseEther(amount.toString())\n      });\n      console.log(`📝 Transaction hash: ${tx.hash}`);\n      const receipt = await tx.wait();\n      console.log(`✅ Bet placed successfully! Block: ${receipt.blockNumber}`);\n      return receipt;\n    } catch (err) {\n      console.error('❌ Error placing bet:', err);\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get market info\n  const getMarket = async marketId => {\n    if (!contract) {\n      throw new Error('Contract not connected');\n    }\n    try {\n      const market = await contract.markets(marketId);\n      return market;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Get user bet\n  const getUserBet = async marketId => {\n    if (!contract || !account) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      const bet = await contract.bets(marketId, account);\n      return bet;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Get all user bets (check multiple markets)\n  const getAllUserBets = async () => {\n    if (!contract || !account) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      console.log('🔍 Fetching user bets for account:', account);\n      console.log('📋 Contract address:', CONTRACT_ADDRESS);\n      const userBets = [];\n\n      // Check market #2 specifically since we just created it\n      try {\n        console.log(`🔎 Checking market 2...`);\n        const bet = await contract.bets(2, account);\n        console.log(`📊 Market 2 bet:`, bet);\n        if (bet && bet.amount > 0) {\n          console.log(`✅ Found bet in market 2:`, ethers.formatEther(bet.amount), 'ETH');\n          const market = await contract.markets(2);\n          console.log(`📈 Market 2 details:`, market);\n          userBets.push({\n            marketId: 2,\n            bet,\n            market\n          });\n        }\n      } catch (error) {\n        console.log(`❌ Market 2 error:`, error.message);\n      }\n      console.log('🎯 Total user bets found:', userBets.length);\n      return userBets;\n    } catch (err) {\n      console.error('💥 Error in getAllUserBets:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Claim winnings\n  const claimWinnings = async marketId => {\n    if (!contract || !signer) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const tx = await contract.claimWinnings(marketId);\n      const receipt = await tx.wait();\n      return receipt;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get match details from backend\n  const getMatchDetails = async marketId => {\n    try {\n      const response = await fetch(`http://localhost:4000/api/matches`);\n      const data = await response.json();\n      if (data.success && data.matches) {\n        // Find match by ID (marketId corresponds to match id)\n        const match = data.matches.find(m => m.id === marketId);\n        return match || null;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching match details:', error);\n      return null;\n    }\n  };\n  return {\n    contract,\n    signer,\n    account,\n    loading,\n    error,\n    connectWallet,\n    placeBet,\n    getMarket,\n    getUserBet,\n    getAllUserBets,\n    claimWinnings,\n    isEarlyBettor,\n    getMaxBet,\n    getMatchDetails\n  };\n};\n_s(useBetzilla, \"4l3HEItAnwSDeqZYy/BbtdlCgVo=\");","map":{"version":3,"names":["useState","useEffect","ethers","BetZillaArtifact","BetZillaABI","abi","CONTRACT_ADDRESS","useBetzilla","_s","contract","setContract","signer","setSigner","account","setAccount","loading","setLoading","error","setError","isInitialized","setIsInitialized","checkWalletConnection","window","ethereum","accounts","request","method","length","provider","BrowserProvider","getSigner","contractInstance","Contract","err","console","connectWallet","Error","message","initializeWallet","handleAccountsChanged","then","on","removeListener","placeBet","marketId","outcome","amount","log","tx","value","parseEther","toString","hash","receipt","wait","blockNumber","getMarket","market","markets","getUserBet","bet","bets","getAllUserBets","userBets","formatEther","push","claimWinnings","getMatchDetails","response","fetch","data","json","success","matches","match","find","m","id","isEarlyBettor","getMaxBet"],"sources":["/home/matteo/Scrivania/new/frontend/src/hooks/useBetzilla.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport BetZillaArtifact from '../abi/BetZilla.json';\nconst BetZillaABI = BetZillaArtifact.abi;\n\n// Contract address from latest deployment\nconst CONTRACT_ADDRESS = '0x5FbDB2315678afecb367f032d93F642f64180aa3';\n\nexport const useBetzilla = () => {\n  const [contract, setContract] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  // Check if wallet is already connected\n  const checkWalletConnection = async () => {\n    try {\n      if (!window.ethereum) {\n        return false;\n      }\n\n      const accounts = await window.ethereum.request({\n        method: 'eth_accounts',\n      });\n\n      if (accounts.length > 0) {\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        \n        setAccount(accounts[0]);\n        setSigner(signer);\n\n        // Create contract instance\n        const contractInstance = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          BetZillaABI,\n          signer\n        );\n        setContract(contractInstance);\n        return true;\n      }\n      return false;\n    } catch (err) {\n      console.error('Error checking wallet connection:', err);\n      return false;\n    }\n  };\n\n  // Connect to MetaMask\n  const connectWallet = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      if (!window.ethereum) {\n        throw new Error('MetaMask not installed');\n      }\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      \n      setAccount(accounts[0]);\n      setSigner(signer);\n\n      // Create contract instance\n      const contractInstance = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        BetZillaABI,\n        signer\n      );\n      setContract(contractInstance);\n\n      return accounts[0];\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initialize wallet connection on app start\n  useEffect(() => {\n    const initializeWallet = async () => {\n      if (!isInitialized) {\n        await checkWalletConnection();\n        setIsInitialized(true);\n      }\n    };\n\n    initializeWallet();\n  }, [isInitialized]);\n\n  // Listen for account changes\n  useEffect(() => {\n    if (window.ethereum) {\n      const handleAccountsChanged = (accounts) => {\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n          // Recreate contract instance with new signer\n          const provider = new ethers.BrowserProvider(window.ethereum);\n          provider.getSigner().then(signer => {\n            setSigner(signer);\n            const contractInstance = new ethers.Contract(\n              CONTRACT_ADDRESS,\n              BetZillaABI,\n              signer\n            );\n            setContract(contractInstance);\n          });\n        } else {\n          setAccount(null);\n          setContract(null);\n          setSigner(null);\n        }\n      };\n\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      };\n    }\n  }, []);\n\n  // Place a bet\n  const placeBet = async (marketId, outcome, amount) => {\n    if (!contract || !signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      console.log(`🎯 Placing bet: Market ${marketId}, Outcome ${outcome}, Amount ${amount} ETH`);\n\n      const tx = await contract.placeBet(marketId, outcome, {\n        value: ethers.parseEther(amount.toString())\n      });\n\n      console.log(`📝 Transaction hash: ${tx.hash}`);\n      const receipt = await tx.wait();\n      console.log(`✅ Bet placed successfully! Block: ${receipt.blockNumber}`);\n      \n      return receipt;\n    } catch (err) {\n      console.error('❌ Error placing bet:', err);\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get market info\n  const getMarket = async (marketId) => {\n    if (!contract) {\n      throw new Error('Contract not connected');\n    }\n\n    try {\n      const market = await contract.markets(marketId);\n      return market;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Get user bet\n  const getUserBet = async (marketId) => {\n    if (!contract || !account) {\n      throw new Error('Wallet not connected');\n    }\n\n    try {\n      const bet = await contract.bets(marketId, account);\n      return bet;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Get all user bets (check multiple markets)\n  const getAllUserBets = async () => {\n    if (!contract || !account) {\n      throw new Error('Wallet not connected');\n    }\n\n    try {\n      console.log('🔍 Fetching user bets for account:', account);\n      console.log('📋 Contract address:', CONTRACT_ADDRESS);\n      \n      const userBets = [];\n      \n      // Check market #2 specifically since we just created it\n      try {\n        console.log(`🔎 Checking market 2...`);\n        const bet = await contract.bets(2, account);\n        console.log(`📊 Market 2 bet:`, bet);\n        \n        if (bet && bet.amount > 0) {\n          console.log(`✅ Found bet in market 2:`, ethers.formatEther(bet.amount), 'ETH');\n          const market = await contract.markets(2);\n          console.log(`📈 Market 2 details:`, market);\n          \n          userBets.push({\n            marketId: 2,\n            bet,\n            market\n          });\n        }\n      } catch (error) {\n        console.log(`❌ Market 2 error:`, error.message);\n      }\n      \n      console.log('🎯 Total user bets found:', userBets.length);\n      return userBets;\n    } catch (err) {\n      console.error('💥 Error in getAllUserBets:', err);\n      setError(err.message);\n      throw err;\n    }\n  };\n\n  // Claim winnings\n  const claimWinnings = async (marketId) => {\n    if (!contract || !signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const tx = await contract.claimWinnings(marketId);\n      const receipt = await tx.wait();\n      return receipt;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get match details from backend\n  const getMatchDetails = async (marketId) => {\n    try {\n      const response = await fetch(`http://localhost:4000/api/matches`);\n      const data = await response.json();\n      \n      if (data.success && data.matches) {\n        // Find match by ID (marketId corresponds to match id)\n        const match = data.matches.find(m => m.id === marketId);\n        return match || null;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error fetching match details:', error);\n      return null;\n    }\n  };\n\n  return {\n    contract,\n    signer,\n    account,\n    loading,\n    error,\n    connectWallet,\n    placeBet,\n    getMarket,\n    getUserBet,\n    getAllUserBets,\n    claimWinnings,\n    isEarlyBettor,\n    getMaxBet,\n    getMatchDetails,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}